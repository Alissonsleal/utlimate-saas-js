// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  password      String?
  salt          String?

  customer Customer?

  accounts      Account[]
  accounts2     Account2[]
  sessions      Session[]
  subscriptions Subscription[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "users")
}

model Account2 {
  id             String  @id @default(uuid())
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  provider       String
  providerUserId String  @map(name: "provider_user_id")
  accessToken    String? @map(name: "access_token")
  refreshToken   String? @map(name: "refresh_token")
}

model Account {
  id                 String  @id @default(uuid())
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  type               String
  provider           String
  providerAccountId  String  @map(name: "provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?


  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map(name: "session_token")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expires      DateTime

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([identifier, token])
  @@map(name: "verification_requests")
}

model Customer {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @map(name: "user_id")


  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "customers")
}

model Product {
  id          String  @id @default(uuid())
  active      Boolean @default(false)
  name        String
  description String?
  image       String?
  metadata    Json?

  prices Price[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "products")
}

model Price {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map(name: "product_id")

  active        Boolean        @default(false)
  unitAmount    Int?           @map(name: "unit_amount")
  currency      String
  type          PriceType?
  subscriptions Subscription[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "prices")
}

model Subscription {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @map(name: "user_id")
  price   Price  @relation(fields: [priceId], references: [id])
  priceId String

  status SubscriptionStatus

  start_date           DateTime?
  ended_at             DateTime?
  trial_end            DateTime?
  trial_start          DateTime?
  cancel_at            DateTime?
  cancel_at_period_end Boolean?
  canceled_at          DateTime?

  metadata Json?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  @@map(name: "subscriptions")
}

enum PriceType {
  recurring
  one_time
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}
